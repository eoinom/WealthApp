using backendData.Models;
using System;
using System.Collections.Generic;
using System.Linq;

namespace backendData
{
    public static class backendDbSeedData
    {
        public static void EnsureSeedData(this backendDbContext db)
        {
            EnsureCountriesSeedData(db);
            EnsureCurrenciesSeedData(db);
            EnsureUsersSeedData(db);
            EnsureUserAccountsSeedData(db);
            EnsureUserLoansSeedData(db);
            EnsureAccountValuesSeedData(db);
        }

        private static void EnsureCountriesSeedData(backendDbContext db)
        {
            if (!db.Countries.Any())
            {
                var countries = new List<Country>
                {
                    new Country { Iso2Code = "AF", Iso3Code = "AFG", Name = "Afghanistan", Continent = "AS" },
                    new Country { Iso2Code = "AX", Iso3Code = "ALA", Name = "Aland Islands", Continent = "EU" },
                    new Country { Iso2Code = "AL", Iso3Code = "ALB", Name = "Albania", Continent = "EU" },
                    new Country { Iso2Code = "DZ", Iso3Code = "DZA", Name = "Algeria", Continent = "AF" },
                    new Country { Iso2Code = "AS", Iso3Code = "ASM", Name = "American Samoa", Continent = "OC" },
                    new Country { Iso2Code = "AD", Iso3Code = "AND", Name = "Andorra", Continent = "EU" },
                    new Country { Iso2Code = "AO", Iso3Code = "AGO", Name = "Angola", Continent = "AF" },
                    new Country { Iso2Code = "AI", Iso3Code = "AIA", Name = "Anguilla", Continent = "NA" },
                    new Country { Iso2Code = "AQ", Iso3Code = "ATA", Name = "Antarctica", Continent = "AN" },
                    new Country { Iso2Code = "AG", Iso3Code = "ATG", Name = "Antigua and Barbuda", Continent = "NA" },
                    new Country { Iso2Code = "AR", Iso3Code = "ARG", Name = "Argentina", Continent = "SA" },
                    new Country { Iso2Code = "AM", Iso3Code = "ARM", Name = "Armenia", Continent = "AS" },
                    new Country { Iso2Code = "AW", Iso3Code = "ABW", Name = "Aruba", Continent = "NA" },
                    new Country { Iso2Code = "AU", Iso3Code = "AUS", Name = "Australia", Continent = "OC" },
                    new Country { Iso2Code = "AT", Iso3Code = "AUT", Name = "Austria", Continent = "EU" },
                    new Country { Iso2Code = "AZ", Iso3Code = "AZE", Name = "Azerbaijan", Continent = "AS" },
                    new Country { Iso2Code = "BS", Iso3Code = "BHS", Name = "Bahamas", Continent = "NA" },
                    new Country { Iso2Code = "BH", Iso3Code = "BHR", Name = "Bahrain", Continent = "AS" },
                    new Country { Iso2Code = "BD", Iso3Code = "BGD", Name = "Bangladesh", Continent = "AS" },
                    new Country { Iso2Code = "BB", Iso3Code = "BRB", Name = "Barbados", Continent = "NA" },
                    new Country { Iso2Code = "BY", Iso3Code = "BLR", Name = "Belarus", Continent = "EU" },
                    new Country { Iso2Code = "BE", Iso3Code = "BEL", Name = "Belgium", Continent = "EU" },
                    new Country { Iso2Code = "BZ", Iso3Code = "BLZ", Name = "Belize", Continent = "NA" },
                    new Country { Iso2Code = "BJ", Iso3Code = "BEN", Name = "Benin", Continent = "AF" },
                    new Country { Iso2Code = "BM", Iso3Code = "BMU", Name = "Bermuda", Continent = "NA" },
                    new Country { Iso2Code = "BT", Iso3Code = "BTN", Name = "Bhutan", Continent = "AS" },
                    new Country { Iso2Code = "BO", Iso3Code = "BOL", Name = "Bolivia", Continent = "SA" },
                    new Country { Iso2Code = "BQ", Iso3Code = "BES", Name = "Bonaire, Sint Eustatius and Saba", Continent = "NA" },
                    new Country { Iso2Code = "BA", Iso3Code = "BIH", Name = "Bosnia and Herzegovina", Continent = "EU" },
                    new Country { Iso2Code = "BW", Iso3Code = "BWA", Name = "Botswana", Continent = "AF" },
                    new Country { Iso2Code = "BV", Iso3Code = "BVT", Name = "Bouvet Island", Continent = "AN" },
                    new Country { Iso2Code = "BR", Iso3Code = "BRA", Name = "Brazil", Continent = "SA" },
                    new Country { Iso2Code = "VG", Iso3Code = "VGB", Name = "British Virgin Islands", Continent = "NA" },
                    new Country { Iso2Code = "IO", Iso3Code = "IOT", Name = "British Indian Ocean Territory", Continent = "AS" },
                    new Country { Iso2Code = "BN", Iso3Code = "BRN", Name = "Brunei Darussalam", Continent = "AS" },
                    new Country { Iso2Code = "BG", Iso3Code = "BGR", Name = "Bulgaria", Continent = "EU" },
                    new Country { Iso2Code = "BF", Iso3Code = "BFA", Name = "Burkina Faso", Continent = "AF" },
                    new Country { Iso2Code = "BI", Iso3Code = "BDI", Name = "Burundi", Continent = "AF" },
                    new Country { Iso2Code = "KH", Iso3Code = "KHM", Name = "Cambodia", Continent = "AS" },
                    new Country { Iso2Code = "CM", Iso3Code = "CMR", Name = "Cameroon", Continent = "AF" },
                    new Country { Iso2Code = "CA", Iso3Code = "CAN", Name = "Canada", Continent = "NA" },
                    new Country { Iso2Code = "CV", Iso3Code = "CPV", Name = "Cape Verde", Continent = "AF" },
                    new Country { Iso2Code = "KY", Iso3Code = "CYM", Name = "Cayman Islands", Continent = "NA" },
                    new Country { Iso2Code = "CF", Iso3Code = "CAF", Name = "Central African Republic", Continent = "AF" },
                    new Country { Iso2Code = "TD", Iso3Code = "TCD", Name = "Chad", Continent = "AF" },
                    new Country { Iso2Code = "CL", Iso3Code = "CHL", Name = "Chile", Continent = "SA" },
                    new Country { Iso2Code = "CN", Iso3Code = "CHN", Name = "China", Continent = "AS" },
                    new Country { Iso2Code = "HK", Iso3Code = "HKG", Name = "Hong Kong, Special Administrative Region of China", Continent = "AS" },
                    new Country { Iso2Code = "MO", Iso3Code = "MAC", Name = "Macao, Special Administrative Region of China", Continent = "AS" },
                    new Country { Iso2Code = "CX", Iso3Code = "CXR", Name = "Christmas Island", Continent = "AS" },
                    new Country { Iso2Code = "CC", Iso3Code = "CCK", Name = "Cocos (Keeling) Islands", Continent = "AS" },
                    new Country { Iso2Code = "CO", Iso3Code = "COL", Name = "Colombia", Continent = "SA" },
                    new Country { Iso2Code = "KM", Iso3Code = "COM", Name = "Comoros", Continent = "AF" },
                    new Country { Iso2Code = "CG", Iso3Code = "COG", Name = "Congo (Brazzaville)", Continent = "AF" },
                    new Country { Iso2Code = "CD", Iso3Code = "COD", Name = "Congo, Democratic Republic of the", Continent = "AF" },
                    new Country { Iso2Code = "CK", Iso3Code = "COK", Name = "Cook Islands", Continent = "OC" },
                    new Country { Iso2Code = "CR", Iso3Code = "CRI", Name = "Costa Rica", Continent = "NA" },
                    new Country { Iso2Code = "CI", Iso3Code = "CIV", Name = "Côte d'Ivoire", Continent = "AF" },
                    new Country { Iso2Code = "HR", Iso3Code = "HRV", Name = "Croatia", Continent = "EU" },
                    new Country { Iso2Code = "CU", Iso3Code = "CUB", Name = "Cuba", Continent = "NA" },
                    new Country { Iso2Code = "CW", Iso3Code = "CUW", Name = "Curaçao", Continent = "NA" },
                    new Country { Iso2Code = "CY", Iso3Code = "CYP", Name = "Cyprus", Continent = "EU" },
                    new Country { Iso2Code = "CZ", Iso3Code = "CZE", Name = "Czech Republic", Continent = "EU" },
                    new Country { Iso2Code = "DK", Iso3Code = "DNK", Name = "Denmark", Continent = "EU" },
                    new Country { Iso2Code = "DJ", Iso3Code = "DJI", Name = "Djibouti", Continent = "AF" },
                    new Country { Iso2Code = "DM", Iso3Code = "DMA", Name = "Dominica", Continent = "NA" },
                    new Country { Iso2Code = "DO", Iso3Code = "DOM", Name = "Dominican Republic", Continent = "NA" },
                    new Country { Iso2Code = "EC", Iso3Code = "ECU", Name = "Ecuador", Continent = "SA" },
                    new Country { Iso2Code = "EG", Iso3Code = "EGY", Name = "Egypt", Continent = "AF" },
                    new Country { Iso2Code = "SV", Iso3Code = "SLV", Name = "El Salvador", Continent = "NA" },
                    new Country { Iso2Code = "GQ", Iso3Code = "GNQ", Name = "Equatorial Guinea", Continent = "AF" },
                    new Country { Iso2Code = "ER", Iso3Code = "ERI", Name = "Eritrea", Continent = "AF" },
                    new Country { Iso2Code = "EE", Iso3Code = "EST", Name = "Estonia", Continent = "EU" },
                    new Country { Iso2Code = "ET", Iso3Code = "ETH", Name = "Ethiopia", Continent = "AF" },
                    new Country { Iso2Code = "FK", Iso3Code = "FLK", Name = "Falkland Islands (Malvinas)", Continent = "SA" },
                    new Country { Iso2Code = "FO", Iso3Code = "FRO", Name = "Faroe Islands", Continent = "EU" },
                    new Country { Iso2Code = "FJ", Iso3Code = "FJI", Name = "Fiji", Continent = "OC" },
                    new Country { Iso2Code = "FI", Iso3Code = "FIN", Name = "Finland", Continent = "EU" },
                    new Country { Iso2Code = "FR", Iso3Code = "FRA", Name = "France", Continent = "EU" },
                    new Country { Iso2Code = "GF", Iso3Code = "GUF", Name = "French Guiana", Continent = "SA" },
                    new Country { Iso2Code = "PF", Iso3Code = "PYF", Name = "French Polynesia", Continent = "OC" },
                    new Country { Iso2Code = "TF", Iso3Code = "ATF", Name = "French Southern Territories", Continent = "AN" },
                    new Country { Iso2Code = "GA", Iso3Code = "GAB", Name = "Gabon", Continent = "AF" },
                    new Country { Iso2Code = "GM", Iso3Code = "GMB", Name = "Gambia", Continent = "AF" },
                    new Country { Iso2Code = "GE", Iso3Code = "GEO", Name = "Georgia", Continent = "AS" },
                    new Country { Iso2Code = "DE", Iso3Code = "DEU", Name = "Germany", Continent = "EU" },
                    new Country { Iso2Code = "GH", Iso3Code = "GHA", Name = "Ghana", Continent = "AF" },
                    new Country { Iso2Code = "GI", Iso3Code = "GIB", Name = "Gibraltar", Continent = "EU" },
                    new Country { Iso2Code = "GR", Iso3Code = "GRC", Name = "Greece", Continent = "EU" },
                    new Country { Iso2Code = "GL", Iso3Code = "GRL", Name = "Greenland", Continent = "NA" },
                    new Country { Iso2Code = "GD", Iso3Code = "GRD", Name = "Grenada", Continent = "NA" },
                    new Country { Iso2Code = "GP", Iso3Code = "GLP", Name = "Guadeloupe", Continent = "NA" },
                    new Country { Iso2Code = "GU", Iso3Code = "GUM", Name = "Guam", Continent = "OC" },
                    new Country { Iso2Code = "GT", Iso3Code = "GTM", Name = "Guatemala", Continent = "NA" },
                    new Country { Iso2Code = "GG", Iso3Code = "GGY", Name = "Guernsey", Continent = "EU" },
                    new Country { Iso2Code = "GN", Iso3Code = "GIN", Name = "Guinea", Continent = "AF" },
                    new Country { Iso2Code = "GW", Iso3Code = "GNB", Name = "Guinea-Bissau", Continent = "AF" },
                    new Country { Iso2Code = "GY", Iso3Code = "GUY", Name = "Guyana", Continent = "SA" },
                    new Country { Iso2Code = "HT", Iso3Code = "HTI", Name = "Haiti", Continent = "NA" },
                    new Country { Iso2Code = "HM", Iso3Code = "HMD", Name = "Heard Island and Mcdonald Islands", Continent = "AN" },
                    new Country { Iso2Code = "VA", Iso3Code = "VAT", Name = "Holy See (Vatican City State)", Continent = "EU" },
                    new Country { Iso2Code = "HN", Iso3Code = "HND", Name = "Honduras", Continent = "NA" },
                    new Country { Iso2Code = "HU", Iso3Code = "HUN", Name = "Hungary", Continent = "EU" },
                    new Country { Iso2Code = "IS", Iso3Code = "ISL", Name = "Iceland", Continent = "EU" },
                    new Country { Iso2Code = "IN", Iso3Code = "IND", Name = "India", Continent = "AS" },
                    new Country { Iso2Code = "ID", Iso3Code = "IDN", Name = "Indonesia", Continent = "AS" },
                    new Country { Iso2Code = "IR", Iso3Code = "IRN", Name = "Iran, Islamic Republic of", Continent = "AS" },
                    new Country { Iso2Code = "IQ", Iso3Code = "IRQ", Name = "Iraq", Continent = "AS" },
                    new Country { Iso2Code = "IE", Iso3Code = "IRL", Name = "Ireland", Continent = "EU" },
                    new Country { Iso2Code = "IM", Iso3Code = "IMN", Name = "Isle of Man", Continent = "EU" },
                    new Country { Iso2Code = "IL", Iso3Code = "ISR", Name = "Israel", Continent = "AS" },
                    new Country { Iso2Code = "IT", Iso3Code = "ITA", Name = "Italy", Continent = "EU" },
                    new Country { Iso2Code = "JM", Iso3Code = "JAM", Name = "Jamaica", Continent = "NA" },
                    new Country { Iso2Code = "JP", Iso3Code = "JPN", Name = "Japan", Continent = "AS" },
                    new Country { Iso2Code = "JE", Iso3Code = "JEY", Name = "Jersey", Continent = "EU" },
                    new Country { Iso2Code = "JO", Iso3Code = "JOR", Name = "Jordan", Continent = "AS" },
                    new Country { Iso2Code = "KZ", Iso3Code = "KAZ", Name = "Kazakhstan", Continent = "AS" },
                    new Country { Iso2Code = "KE", Iso3Code = "KEN", Name = "Kenya", Continent = "AF" },
                    new Country { Iso2Code = "KI", Iso3Code = "KIR", Name = "Kiribati", Continent = "OC" },
                    new Country { Iso2Code = "KP", Iso3Code = "PRK", Name = "Korea, Democratic People's Republic of", Continent = "AS" },
                    new Country { Iso2Code = "KR", Iso3Code = "KOR", Name = "Korea, Republic of", Continent = "AS" },
                    new Country { Iso2Code = "KW", Iso3Code = "KWT", Name = "Kuwait", Continent = "AS" },
                    new Country { Iso2Code = "KG", Iso3Code = "KGZ", Name = "Kyrgyzstan", Continent = "AS" },
                    new Country { Iso2Code = "LA", Iso3Code = "LAO", Name = "Lao PDR", Continent = "AS" },
                    new Country { Iso2Code = "LV", Iso3Code = "LVA", Name = "Latvia", Continent = "EU" },
                    new Country { Iso2Code = "LB", Iso3Code = "LBN", Name = "Lebanon", Continent = "AS" },
                    new Country { Iso2Code = "LS", Iso3Code = "LSO", Name = "Lesotho", Continent = "AF" },
                    new Country { Iso2Code = "LR", Iso3Code = "LBR", Name = "Liberia", Continent = "AF" },
                    new Country { Iso2Code = "LY", Iso3Code = "LBY", Name = "Libya", Continent = "AF" },
                    new Country { Iso2Code = "LI", Iso3Code = "LIE", Name = "Liechtenstein", Continent = "EU" },
                    new Country { Iso2Code = "LT", Iso3Code = "LTU", Name = "Lithuania", Continent = "EU" },
                    new Country { Iso2Code = "LU", Iso3Code = "LUX", Name = "Luxembourg", Continent = "EU" },
                    new Country { Iso2Code = "MK", Iso3Code = "MKD", Name = "Macedonia, Republic of", Continent = "EU" },
                    new Country { Iso2Code = "MG", Iso3Code = "MDG", Name = "Madagascar", Continent = "AF" },
                    new Country { Iso2Code = "MW", Iso3Code = "MWI", Name = "Malawi", Continent = "AF" },
                    new Country { Iso2Code = "MY", Iso3Code = "MYS", Name = "Malaysia", Continent = "AS" },
                    new Country { Iso2Code = "MV", Iso3Code = "MDV", Name = "Maldives", Continent = "AS" },
                    new Country { Iso2Code = "ML", Iso3Code = "MLI", Name = "Mali", Continent = "AF" },
                    new Country { Iso2Code = "MT", Iso3Code = "MLT", Name = "Malta", Continent = "EU" },
                    new Country { Iso2Code = "MH", Iso3Code = "MHL", Name = "Marshall Islands", Continent = "OC" },
                    new Country { Iso2Code = "MQ", Iso3Code = "MTQ", Name = "Martinique", Continent = "NA" },
                    new Country { Iso2Code = "MR", Iso3Code = "MRT", Name = "Mauritania", Continent = "AF" },
                    new Country { Iso2Code = "MU", Iso3Code = "MUS", Name = "Mauritius", Continent = "AF" },
                    new Country { Iso2Code = "YT", Iso3Code = "MYT", Name = "Mayotte", Continent = "AF" },
                    new Country { Iso2Code = "MX", Iso3Code = "MEX", Name = "Mexico", Continent = "NA" },
                    new Country { Iso2Code = "FM", Iso3Code = "FSM", Name = "Micronesia, Federated States of", Continent = "OC" },
                    new Country { Iso2Code = "MD", Iso3Code = "MDA", Name = "Moldova", Continent = "EU" },
                    new Country { Iso2Code = "MC", Iso3Code = "MCO", Name = "Monaco", Continent = "EU" },
                    new Country { Iso2Code = "MN", Iso3Code = "MNG", Name = "Mongolia", Continent = "AS" },
                    new Country { Iso2Code = "ME", Iso3Code = "MNE", Name = "Montenegro", Continent = "EU" },
                    new Country { Iso2Code = "MS", Iso3Code = "MSR", Name = "Montserrat", Continent = "NA" },
                    new Country { Iso2Code = "MA", Iso3Code = "MAR", Name = "Morocco", Continent = "AF" },
                    new Country { Iso2Code = "MZ", Iso3Code = "MOZ", Name = "Mozambique", Continent = "AF" },
                    new Country { Iso2Code = "MM", Iso3Code = "MMR", Name = "Myanmar", Continent = "AS" },
                    new Country { Iso2Code = "NA", Iso3Code = "NAM", Name = "Namibia", Continent = "AF" },
                    new Country { Iso2Code = "NR", Iso3Code = "NRU", Name = "Nauru", Continent = "OC" },
                    new Country { Iso2Code = "NP", Iso3Code = "NPL", Name = "Nepal", Continent = "AS" },
                    new Country { Iso2Code = "NL", Iso3Code = "NLD", Name = "Netherlands", Continent = "EU" },
                    new Country { Iso2Code = "NC", Iso3Code = "NCL", Name = "New Caledonia", Continent = "OC" },
                    new Country { Iso2Code = "NZ", Iso3Code = "NZL", Name = "New Zealand", Continent = "OC" },
                    new Country { Iso2Code = "NI", Iso3Code = "NIC", Name = "Nicaragua", Continent = "NA" },
                    new Country { Iso2Code = "NE", Iso3Code = "NER", Name = "Niger", Continent = "AF" },
                    new Country { Iso2Code = "NG", Iso3Code = "NGA", Name = "Nigeria", Continent = "AF" },
                    new Country { Iso2Code = "NU", Iso3Code = "NIU", Name = "Niue", Continent = "OC" },
                    new Country { Iso2Code = "NF", Iso3Code = "NFK", Name = "Norfolk Island", Continent = "OC" },
                    new Country { Iso2Code = "MP", Iso3Code = "MNP", Name = "Northern Mariana Islands", Continent = "OC" },
                    new Country { Iso2Code = "NO", Iso3Code = "NOR", Name = "Norway", Continent = "EU" },
                    new Country { Iso2Code = "OM", Iso3Code = "OMN", Name = "Oman", Continent = "AS" },
                    new Country { Iso2Code = "PK", Iso3Code = "PAK", Name = "Pakistan", Continent = "AS" },
                    new Country { Iso2Code = "PW", Iso3Code = "PLW", Name = "Palau", Continent = "OC" },
                    new Country { Iso2Code = "PS", Iso3Code = "PSE", Name = "Palestinian Territory, Occupied", Continent = "AS" },
                    new Country { Iso2Code = "PA", Iso3Code = "PAN", Name = "Panama", Continent = "NA" },
                    new Country { Iso2Code = "PG", Iso3Code = "PNG", Name = "Papua New Guinea", Continent = "OC" },
                    new Country { Iso2Code = "PY", Iso3Code = "PRY", Name = "Paraguay", Continent = "SA" },
                    new Country { Iso2Code = "PE", Iso3Code = "PER", Name = "Peru", Continent = "SA" },
                    new Country { Iso2Code = "PH", Iso3Code = "PHL", Name = "Philippines", Continent = "AS" },
                    new Country { Iso2Code = "PN", Iso3Code = "PCN", Name = "Pitcairn", Continent = "OC" },
                    new Country { Iso2Code = "PL", Iso3Code = "POL", Name = "Poland", Continent = "EU" },
                    new Country { Iso2Code = "PT", Iso3Code = "PRT", Name = "Portugal", Continent = "EU" },
                    new Country { Iso2Code = "PR", Iso3Code = "PRI", Name = "Puerto Rico", Continent = "NA" },
                    new Country { Iso2Code = "QA", Iso3Code = "QAT", Name = "Qatar", Continent = "AS" },
                    new Country { Iso2Code = "RE", Iso3Code = "REU", Name = "Réunion", Continent = "AF" },
                    new Country { Iso2Code = "RO", Iso3Code = "ROU", Name = "Romania", Continent = "EU" },
                    new Country { Iso2Code = "RU", Iso3Code = "RUS", Name = "Russian Federation", Continent = "EU" },
                    new Country { Iso2Code = "RW", Iso3Code = "RWA", Name = "Rwanda", Continent = "AF" },
                    new Country { Iso2Code = "BL", Iso3Code = "BLM", Name = "Saint-Barthélemy", Continent = "NA" },
                    new Country { Iso2Code = "SH", Iso3Code = "SHN", Name = "Saint Helena", Continent = "AF" },
                    new Country { Iso2Code = "KN", Iso3Code = "KNA", Name = "Saint Kitts and Nevis", Continent = "NA" },
                    new Country { Iso2Code = "LC", Iso3Code = "LCA", Name = "Saint Lucia", Continent = "NA" },
                    new Country { Iso2Code = "MF", Iso3Code = "MAF", Name = "Saint-Martin (French part)", Continent = "NA" },
                    new Country { Iso2Code = "PM", Iso3Code = "SPM", Name = "Saint Pierre and Miquelon", Continent = "NA" },
                    new Country { Iso2Code = "VC", Iso3Code = "VCT", Name = "Saint Vincent and Grenadines", Continent = "NA" },
                    new Country { Iso2Code = "WS", Iso3Code = "WSM", Name = "Samoa", Continent = "OC" },
                    new Country { Iso2Code = "SM", Iso3Code = "SMR", Name = "San Marino", Continent = "EU" },
                    new Country { Iso2Code = "ST", Iso3Code = "STP", Name = "Sao Tome and Principe", Continent = "AF" },
                    new Country { Iso2Code = "SA", Iso3Code = "SAU", Name = "Saudi Arabia", Continent = "AS" },
                    new Country { Iso2Code = "SN", Iso3Code = "SEN", Name = "Senegal", Continent = "AF" },
                    new Country { Iso2Code = "RS", Iso3Code = "SRB", Name = "Serbia", Continent = "EU" },
                    new Country { Iso2Code = "SC", Iso3Code = "SYC", Name = "Seychelles", Continent = "AF" },
                    new Country { Iso2Code = "SL", Iso3Code = "SLE", Name = "Sierra Leone", Continent = "AF" },
                    new Country { Iso2Code = "SG", Iso3Code = "SGP", Name = "Singapore", Continent = "AS" },
                    new Country { Iso2Code = "SX", Iso3Code = "SXM", Name = "Sint Maarten (Dutch part)", Continent = "NA" },
                    new Country { Iso2Code = "SK", Iso3Code = "SVK", Name = "Slovakia", Continent = "EU" },
                    new Country { Iso2Code = "SI", Iso3Code = "SVN", Name = "Slovenia", Continent = "EU" },
                    new Country { Iso2Code = "SB", Iso3Code = "SLB", Name = "Solomon Islands", Continent = "OC" },
                    new Country { Iso2Code = "SO", Iso3Code = "SOM", Name = "Somalia", Continent = "AF" },
                    new Country { Iso2Code = "ZA", Iso3Code = "ZAF", Name = "South Africa", Continent = "AF" },
                    new Country { Iso2Code = "GS", Iso3Code = "SGS", Name = "South Georgia and the South Sandwich Islands", Continent = "AN" },
                    new Country { Iso2Code = "SS", Iso3Code = "SSD", Name = "South Sudan", Continent = "AF" },
                    new Country { Iso2Code = "ES", Iso3Code = "ESP", Name = "Spain", Continent = "EU" },
                    new Country { Iso2Code = "LK", Iso3Code = "LKA", Name = "Sri Lanka", Continent = "AS" },
                    new Country { Iso2Code = "SD", Iso3Code = "SDN", Name = "Sudan", Continent = "AF" },
                    new Country { Iso2Code = "SR", Iso3Code = "SUR", Name = "Suriname *", Continent = "SA" },
                    new Country { Iso2Code = "SJ", Iso3Code = "SJM", Name = "Svalbard and Jan Mayen Islands", Continent = "EU" },
                    new Country { Iso2Code = "SZ", Iso3Code = "SWZ", Name = "Swaziland", Continent = "AF" },
                    new Country { Iso2Code = "SE", Iso3Code = "SWE", Name = "Sweden", Continent = "EU" },
                    new Country { Iso2Code = "CH", Iso3Code = "CHE", Name = "Switzerland", Continent = "EU" },
                    new Country { Iso2Code = "SY", Iso3Code = "SYR", Name = "Syrian Arab Republic (Syria)", Continent = "AS" },
                    new Country { Iso2Code = "TW", Iso3Code = "TWN", Name = "Taiwan", Continent = "AS" },
                    new Country { Iso2Code = "TJ", Iso3Code = "TJK", Name = "Tajikistan", Continent = "AS" },
                    new Country { Iso2Code = "TZ", Iso3Code = "TZA", Name = "Tanzania *, United Republic of", Continent = "AF" },
                    new Country { Iso2Code = "TH", Iso3Code = "THA", Name = "Thailand", Continent = "AS" },
                    new Country { Iso2Code = "TL", Iso3Code = "TLS", Name = "Timor-Leste", Continent = "OC" },
                    new Country { Iso2Code = "TG", Iso3Code = "TGO", Name = "Togo", Continent = "AF" },
                    new Country { Iso2Code = "TK", Iso3Code = "TKL", Name = "Tokelau", Continent = "OC" },
                    new Country { Iso2Code = "TO", Iso3Code = "TON", Name = "Tonga", Continent = "OC" },
                    new Country { Iso2Code = "TT", Iso3Code = "TTO", Name = "Trinidad and Tobago", Continent = "NA" },
                    new Country { Iso2Code = "TN", Iso3Code = "TUN", Name = "Tunisia", Continent = "AF" },
                    new Country { Iso2Code = "TR", Iso3Code = "TUR", Name = "Turkey", Continent = "AS" },
                    new Country { Iso2Code = "TM", Iso3Code = "TKM", Name = "Turkmenistan", Continent = "AS" },
                    new Country { Iso2Code = "TC", Iso3Code = "TCA", Name = "Turks and Caicos Islands", Continent = "NA" },
                    new Country { Iso2Code = "TV", Iso3Code = "TUV", Name = "Tuvalu", Continent = "OC" },
                    new Country { Iso2Code = "UG", Iso3Code = "UGA", Name = "Uganda", Continent = "AF" },
                    new Country { Iso2Code = "UA", Iso3Code = "UKR", Name = "Ukraine", Continent = "EU" },
                    new Country { Iso2Code = "AE", Iso3Code = "ARE", Name = "United Arab Emirates", Continent = "AS" },
                    new Country { Iso2Code = "GB", Iso3Code = "GBR", Name = "United Kingdom", Continent = "EU" },
                    new Country { Iso2Code = "US", Iso3Code = "USA", Name = "United States of America", Continent = "NA" },
                    new Country { Iso2Code = "UM", Iso3Code = "UMI", Name = "United States Minor Outlying Islands", Continent = "OC" },
                    new Country { Iso2Code = "UY", Iso3Code = "URY", Name = "Uruguay", Continent = "SA" },
                    new Country { Iso2Code = "UZ", Iso3Code = "UZB", Name = "Uzbekistan", Continent = "AS" },
                    new Country { Iso2Code = "VU", Iso3Code = "VUT", Name = "Vanuatu", Continent = "OC" },
                    new Country { Iso2Code = "VE", Iso3Code = "VEN", Name = "Venezuela (Bolivarian Republic of)", Continent = "SA" },
                    new Country { Iso2Code = "VN", Iso3Code = "VNM", Name = "Viet Nam", Continent = "AS" },
                    new Country { Iso2Code = "VI", Iso3Code = "VIR", Name = "Virgin Islands, US", Continent = "NA" },
                    new Country { Iso2Code = "WF", Iso3Code = "WLF", Name = "Wallis and Futuna Islands", Continent = "OC" },
                    new Country { Iso2Code = "EH", Iso3Code = "ESH", Name = "Western Sahara", Continent = "AF" },
                    new Country { Iso2Code = "YE", Iso3Code = "YEM", Name = "Yemen", Continent = "AS" },
                    new Country { Iso2Code = "ZM", Iso3Code = "ZMB", Name = "Zambia", Continent = "AF" },
                    new Country { Iso2Code = "ZW", Iso3Code = "ZWE", Name = "Zimbabwe", Continent = "AF" }
                };

                db.Countries.AddRange(countries);
                db.SaveChanges();
            }
        }

        private static void EnsureCurrenciesSeedData(backendDbContext db)
        {
            if (!db.Currencies.Any())
            {
                var currencies = new List<Currency>
                {
                    new Currency { Code = "ALL", NameShort = "Lek", NameLong = "Lek" },
                    new Currency { Code = "DZD", NameShort = "Dinar", NameLong = "Algerian Dinar" },
                    new Currency { Code = "ARS", NameShort = "Peso", NameLong = "Argentine Peso" },
                    new Currency { Code = "AUD", NameShort = "Dollar", NameLong = "Australian Dollar" },
                    new Currency { Code = "BSD", NameShort = "Dollar", NameLong = "Bahamian Dollar" },
                    new Currency { Code = "BHD", NameShort = "Dinar", NameLong = "Bahraini Dinar" },
                    new Currency { Code = "BDT", NameShort = "Taka", NameLong = "Taka" },
                    new Currency { Code = "AMD", NameShort = "Dram", NameLong = "Armenian Dram" },
                    new Currency { Code = "BBD", NameShort = "Dollar", NameLong = "Barbados Dollar" },
                    new Currency { Code = "BMD", NameShort = "Dollar", NameLong = "Bermudian Dollar" },
                    new Currency { Code = "BTN", NameShort = "Ngultrum", NameLong = "Ngultrum" },
                    new Currency { Code = "BOB", NameShort = "Boliviano", NameLong = "Boliviano" },
                    new Currency { Code = "BWP", NameShort = "Pula", NameLong = "Pula" },
                    new Currency { Code = "BZD", NameShort = "Dollar", NameLong = "Belize Dollar" },
                    new Currency { Code = "SBD", NameShort = "Dollar", NameLong = "Solomon Islands Dollar" },
                    new Currency { Code = "BND", NameShort = "Dollar", NameLong = "Brunei Dollar" },
                    new Currency { Code = "MMK", NameShort = "Kyat", NameLong = "Kyat" },
                    new Currency { Code = "BIF", NameShort = "Franc", NameLong = "Burundi Franc" },
                    new Currency { Code = "KHR", NameShort = "Riel", NameLong = "Riel" },
                    new Currency { Code = "CAD", NameShort = "Dollar", NameLong = "Canadian Dollar" },
                    new Currency { Code = "CVE", NameShort = "Escudo", NameLong = "Cabo Verde Escudo" },
                    new Currency { Code = "KYD", NameShort = "Dollar", NameLong = "Cayman Islands Dollar" },
                    new Currency { Code = "LKR", NameShort = "Rupee", NameLong = "Sri Lanka Rupee" },
                    new Currency { Code = "CLP", NameShort = "Peso", NameLong = "Chilean Peso" },
                    new Currency { Code = "CNY", NameShort = "Renminbi", NameLong = "Yuan Renminbi" },
                    new Currency { Code = "COP", NameShort = "Peso", NameLong = "Colombian Peso" },
                    new Currency { Code = "KMF", NameShort = "Franc", NameLong = "Comorian Franc " },
                    new Currency { Code = "CRC", NameShort = "Colon", NameLong = "Costa Rican Colon" },
                    new Currency { Code = "HRK", NameShort = "Kuna", NameLong = "Kuna" },
                    new Currency { Code = "CUP", NameShort = "Peso", NameLong = "Cuban Peso" },
                    new Currency { Code = "CZK", NameShort = "Koruna", NameLong = "Czech Koruna" },
                    new Currency { Code = "DKK", NameShort = "Krone", NameLong = "Danish Krone" },
                    new Currency { Code = "DOP", NameShort = "Peso", NameLong = "Dominican Peso" },
                    new Currency { Code = "SVC", NameShort = "Colon", NameLong = "El Salvador Colon" },
                    new Currency { Code = "ETB", NameShort = "Birr", NameLong = "Ethiopian Birr" },
                    new Currency { Code = "ERN", NameShort = "Nakfa", NameLong = "Nakfa" },
                    new Currency { Code = "FKP", NameShort = "Pound", NameLong = "Falkland Islands Pound" },
                    new Currency { Code = "FJD", NameShort = "Dollar", NameLong = "Fiji Dollar" },
                    new Currency { Code = "DJF", NameShort = "Franc", NameLong = "Djibouti Franc" },
                    new Currency { Code = "GMD", NameShort = "Dalasi", NameLong = "Dalasi" },
                    new Currency { Code = "GIP", NameShort = "Pound", NameLong = "Gibraltar Pound" },
                    new Currency { Code = "GTQ", NameShort = "Quetzal", NameLong = "Quetzal" },
                    new Currency { Code = "GNF", NameShort = "Franc", NameLong = "Guinean Franc" },
                    new Currency { Code = "GYD", NameShort = "Dollar", NameLong = "Guyana Dollar" },
                    new Currency { Code = "HTG", NameShort = "Gourde", NameLong = "Gourde" },
                    new Currency { Code = "HNL", NameShort = "Lempira", NameLong = "Lempira" },
                    new Currency { Code = "HKD", NameShort = "Dollar", NameLong = "Hong Kong Dollar" },
                    new Currency { Code = "HUF", NameShort = "Forint", NameLong = "Forint" },
                    new Currency { Code = "ISK", NameShort = "Krona", NameLong = "Iceland Krona" },
                    new Currency { Code = "INR", NameShort = "Rupee", NameLong = "Indian Rupee" },
                    new Currency { Code = "IDR", NameShort = "Rupiah", NameLong = "Rupiah" },
                    new Currency { Code = "IRR", NameShort = "Rial", NameLong = "Iranian Rial" },
                    new Currency { Code = "IQD", NameShort = "Dinar", NameLong = "Iraqi Dinar" },
                    new Currency { Code = "ILS", NameShort = "Sheqel", NameLong = "New Israeli Sheqel" },
                    new Currency { Code = "JMD", NameShort = "Dollar", NameLong = "Jamaican Dollar" },
                    new Currency { Code = "JPY", NameShort = "Yen", NameLong = "Yen" },
                    new Currency { Code = "KZT", NameShort = "Tenge", NameLong = "Tenge" },
                    new Currency { Code = "JOD", NameShort = "Dinar", NameLong = "Jordanian Dinar" },
                    new Currency { Code = "KES", NameShort = "Shilling", NameLong = "Kenyan Shilling" },
                    new Currency { Code = "KPW", NameShort = "Won", NameLong = "North Korean Won" },
                    new Currency { Code = "KRW", NameShort = "Won", NameLong = "Won" },
                    new Currency { Code = "KWD", NameShort = "Dinar", NameLong = "Kuwaiti Dinar" },
                    new Currency { Code = "KGS", NameShort = "Som", NameLong = "Som" },
                    new Currency { Code = "LAK", NameShort = "Kip", NameLong = "Lao Kip" },
                    new Currency { Code = "LBP", NameShort = "Pound", NameLong = "Lebanese Pound" },
                    new Currency { Code = "LSL", NameShort = "Loti", NameLong = "Loti" },
                    new Currency { Code = "LRD", NameShort = "Dollar", NameLong = "Liberian Dollar" },
                    new Currency { Code = "LYD", NameShort = "Dinar", NameLong = "Libyan Dinar" },
                    new Currency { Code = "MOP", NameShort = "Pataca", NameLong = "Pataca" },
                    new Currency { Code = "MWK", NameShort = "Kwacha", NameLong = "Malawi Kwacha" },
                    new Currency { Code = "MYR", NameShort = "Ringgit", NameLong = "Malaysian Ringgit" },
                    new Currency { Code = "MVR", NameShort = "Rufiyaa", NameLong = "Rufiyaa" },
                    new Currency { Code = "MUR", NameShort = "Rupee", NameLong = "Mauritius Rupee" },
                    new Currency { Code = "MXN", NameShort = "Peso", NameLong = "Mexican Peso" },
                    new Currency { Code = "MNT", NameShort = "Tugrik", NameLong = "Tugrik" },
                    new Currency { Code = "MDL", NameShort = "Leu", NameLong = "Moldovan Leu" },
                    new Currency { Code = "MAD", NameShort = "Dirham", NameLong = "Moroccan Dirham" },
                    new Currency { Code = "OMR", NameShort = "Omani", NameLong = "Rial Omani" },
                    new Currency { Code = "NAD", NameShort = "Dollar", NameLong = "Namibia Dollar" },
                    new Currency { Code = "NPR", NameShort = "Rupee", NameLong = "Nepalese Rupee" },
                    new Currency { Code = "ANG", NameShort = "Guilder", NameLong = "Netherlands Antillean Guilder" },
                    new Currency { Code = "AWG", NameShort = "Florin", NameLong = "Aruban Florin" },
                    new Currency { Code = "VUV", NameShort = "Vatu", NameLong = "Vatu" },
                    new Currency { Code = "NZD", NameShort = "Dollar", NameLong = "New Zealand Dollar" },
                    new Currency { Code = "NIO", NameShort = "Oro", NameLong = "Cordoba Oro" },
                    new Currency { Code = "NGN", NameShort = "Naira", NameLong = "Naira" },
                    new Currency { Code = "NOK", NameShort = "Krone", NameLong = "Norwegian Krone" },
                    new Currency { Code = "PKR", NameShort = "Rupee", NameLong = "Pakistan Rupee" },
                    new Currency { Code = "PAB", NameShort = "Balboa", NameLong = "Balboa" },
                    new Currency { Code = "PGK", NameShort = "Kina", NameLong = "Kina" },
                    new Currency { Code = "PYG", NameShort = "Guarani", NameLong = "Guarani" },
                    new Currency { Code = "PEN", NameShort = "Sol", NameLong = "Sol" },
                    new Currency { Code = "PHP", NameShort = "Peso", NameLong = "Philippine Peso" },
                    new Currency { Code = "QAR", NameShort = "Rial", NameLong = "Qatari Rial" },
                    new Currency { Code = "RUB", NameShort = "Ruble", NameLong = "Russian Ruble" },
                    new Currency { Code = "RWF", NameShort = "Franc", NameLong = "Rwanda Franc" },
                    new Currency { Code = "SHP", NameShort = "Pound", NameLong = "Saint Helena Pound" },
                    new Currency { Code = "SAR", NameShort = "Riyal", NameLong = "Saudi Riyal" },
                    new Currency { Code = "SCR", NameShort = "Rupee", NameLong = "Seychelles Rupee" },
                    new Currency { Code = "SLL", NameShort = "Leone", NameLong = "Leone" },
                    new Currency { Code = "SGD", NameShort = "Dollar", NameLong = "Singapore Dollar" },
                    new Currency { Code = "VND", NameShort = "Dong", NameLong = "Dong" },
                    new Currency { Code = "SOS", NameShort = "Shilling", NameLong = "Somali Shilling" },
                    new Currency { Code = "ZAR", NameShort = "Rand", NameLong = "Rand" },
                    new Currency { Code = "SSP", NameShort = "Pound", NameLong = "South Sudanese Pound" },
                    new Currency { Code = "SZL", NameShort = "Lilangeni", NameLong = "Lilangeni" },
                    new Currency { Code = "SEK", NameShort = "Krona", NameLong = "Swedish Krona" },
                    new Currency { Code = "CHF", NameShort = "Franc", NameLong = "Swiss Franc" },
                    new Currency { Code = "SYP", NameShort = "Pound", NameLong = "Syrian Pound" },
                    new Currency { Code = "THB", NameShort = "Baht", NameLong = "Baht" },
                    new Currency { Code = "TOP", NameShort = "Pa’anga", NameLong = "Pa’anga" },
                    new Currency { Code = "TTD", NameShort = "Dollar", NameLong = "Trinidad and Tobago Dollar" },
                    new Currency { Code = "AED", NameShort = "Dirham", NameLong = "UAE Dirham" },
                    new Currency { Code = "TND", NameShort = "Dinar", NameLong = "Tunisian Dinar" },
                    new Currency { Code = "UGX", NameShort = "Shilling", NameLong = "Uganda Shilling" },
                    new Currency { Code = "MKD", NameShort = "Denar", NameLong = "Denar" },
                    new Currency { Code = "EGP", NameShort = "Pound", NameLong = "Egyptian Pound" },
                    new Currency { Code = "GBP", NameShort = "Pound", NameLong = "Pound Sterling" },
                    new Currency { Code = "TZS", NameShort = "Shilling", NameLong = "Tanzanian Shilling" },
                    new Currency { Code = "USD", NameShort = "Dollar", NameLong = "US Dollar" },
                    new Currency { Code = "UYU", NameShort = "Uruguayo", NameLong = "Peso Uruguayo" },
                    new Currency { Code = "UZS", NameShort = "Sum", NameLong = "Uzbekistan Sum" },
                    new Currency { Code = "WST", NameShort = "Tala", NameLong = "Tala" },
                    new Currency { Code = "YER", NameShort = "Rial", NameLong = "Yemeni Rial" },
                    new Currency { Code = "TWD", NameShort = "Dollar", NameLong = "New Taiwan Dollar" },
                    new Currency { Code = "UYW", NameShort = "Previsional", NameLong = "Unidad Previsional" },
                    new Currency { Code = "VES", NameShort = "Soberano", NameLong = "Bolívar Soberano" },
                    new Currency { Code = "MRU", NameShort = "Ouguiya", NameLong = "Ouguiya" },
                    new Currency { Code = "STN", NameShort = "Dobra", NameLong = "Dobra" },
                    new Currency { Code = "CUC", NameShort = "Convertible", NameLong = "Peso Convertible" },
                    new Currency { Code = "ZWL", NameShort = "Dollar", NameLong = "Zimbabwe Dollar" },
                    new Currency { Code = "BYN", NameShort = "Ruble", NameLong = "Belarusian Ruble" },
                    new Currency { Code = "TMT", NameShort = "Manat", NameLong = "Turkmenistan New Manat" },
                    new Currency { Code = "GHS", NameShort = "Cedi", NameLong = "Ghana Cedi" },
                    new Currency { Code = "SDG", NameShort = "Pound", NameLong = "Sudanese Pound" },
                    new Currency { Code = "UYI", NameShort = "Peso", NameLong = "Uruguay Peso en Unidades Indexadas (UI)" },
                    new Currency { Code = "RSD", NameShort = "Dinar", NameLong = "Serbian Dinar" },
                    new Currency { Code = "MZN", NameShort = "Metical", NameLong = "Mozambique Metical" },
                    new Currency { Code = "AZN", NameShort = "Manat", NameLong = "Azerbaijan Manat" },
                    new Currency { Code = "RON", NameShort = "Leu", NameLong = "Romanian Leu" },
                    new Currency { Code = "CHE", NameShort = "Euro", NameLong = "WIR Euro" },
                    new Currency { Code = "CHW", NameShort = "Franc", NameLong = "WIR Franc" },
                    new Currency { Code = "TRY", NameShort = "Lira", NameLong = "Turkish Lira" },
                    new Currency { Code = "XAF", NameShort = "BEAC", NameLong = "CFA Franc BEAC" },
                    new Currency { Code = "XCD", NameShort = "Dollar", NameLong = "East Caribbean Dollar" },
                    new Currency { Code = "XOF", NameShort = "BCEAO", NameLong = "CFA Franc BCEAO" },
                    new Currency { Code = "XPF", NameShort = "Franc", NameLong = "CFP Franc" },
                    new Currency { Code = "ZMW", NameShort = "Kwacha", NameLong = "Zambian Kwacha" },
                    new Currency { Code = "SRD", NameShort = "Dollar", NameLong = "Surinam Dollar" },
                    new Currency { Code = "MGA", NameShort = "Ariary", NameLong = "Malagasy Ariary" },
                    new Currency { Code = "COU", NameShort = "Valor Real", NameLong = "Unidad de Valor Real" },
                    new Currency { Code = "AFN", NameShort = "Afghani", NameLong = "Afghani" },
                    new Currency { Code = "TJS", NameShort = "Somoni", NameLong = "Somoni" },
                    new Currency { Code = "AOA", NameShort = "Kwanza", NameLong = "Kwanza" },
                    new Currency { Code = "BGN", NameShort = "Lev", NameLong = "Bulgarian Lev" },
                    new Currency { Code = "CDF", NameShort = "Franc", NameLong = "Congolese Franc" },
                    new Currency { Code = "BAM", NameShort = "Mark", NameLong = "Convertible Mark" },
                    new Currency { Code = "EUR", NameShort = "Euro", NameLong = "Euro" },
                    new Currency { Code = "MXV", NameShort = "UDI", NameLong = "Mexican Unidad de Inversion (UDI)" },
                    new Currency { Code = "UAH", NameShort = "Hryvnia", NameLong = "Hryvnia" },
                    new Currency { Code = "GEL", NameShort = "Lari", NameLong = "Lari" },
                    new Currency { Code = "BOV", NameShort = "Mvdol", NameLong = "Mvdol" },
                    new Currency { Code = "PLN", NameShort = "Zloty", NameLong = "Zloty" },
                    new Currency { Code = "BRL", NameShort = "Real", NameLong = "Brazilian Real" },
                    new Currency { Code = "CLF", NameShort = "Fomento", NameLong = "Unidad de Fomento" },
                    new Currency { Code = "XSU", NameShort = "Sucre", NameLong = "Sucre" }
                };

                db.Currencies.AddRange(currencies);
                db.SaveChanges();
            }
        }


        private static void EnsureUsersSeedData(backendDbContext db)
        {
            if (!db.Users.Any())
            {
                var users = new List<User>
                {
                    new User {
                        Email = "eoinom@gmail.com",
                        Password = "pass1234",
                        FirstName = "Eoin",
                        LastName = "O'Malley",
                        Country = db.Countries.FirstOrDefault(x => x.Iso2Code == "IE"),
                        NewsletterSub = true,
                        DisplayCurrency = db.Currencies.FirstOrDefault(x => x.Code == "EUR")
                    },
                    new User {
                        Email = "joe.bloggs@gmail.com",
                        Password = "pass1234",
                        FirstName = "Joe",
                        LastName = "Bloggs",
                        Country = db.Countries.FirstOrDefault(x => x.Iso2Code == "IE"),
                        NewsletterSub = true,
                        DisplayCurrency = db.Currencies.FirstOrDefault(x => x.Code == "EUR")
                    },
                    new User {
                        Email = "paulmcc@applerecords.com",
                        Password = "pass1234",
                        FirstName = "Paul",
                        LastName = "McCartney",
                        Country = db.Countries.FirstOrDefault(x => x.Iso2Code == "GB"),
                        NewsletterSub = true,
                        DisplayCurrency = db.Currencies.FirstOrDefault(x => x.Code == "GBP")
                    },
                    new User {
                        Email = "ringo@drummers4hire.com",
                        Password = "pass1234",
                        FirstName = "Ringo",
                        LastName = "Starr",
                        Country = db.Countries.FirstOrDefault(x => x.Iso2Code == "CA"),
                        NewsletterSub = true,
                        DisplayCurrency = db.Currencies.FirstOrDefault(x => x.Code == "CAD")
                    },
                    new User {
                        Email = "julieomalley2012@gmail.com",
                        Password = "julieIsGr8",
                        FirstName = "Julie",
                        LastName = "O'Malley",
                        Country = db.Countries.FirstOrDefault(x => x.Iso2Code == "IE"),
                        NewsletterSub = true,
                        DisplayCurrency = db.Currencies.FirstOrDefault(x => x.Code == "EUR")
                    },
                    new User {
                        Email = "jerrym@hotmail.com",
                        Password = "showmethemoney",
                        FirstName = "Jerry",
                        LastName = "Maguire",
                        Country = db.Countries.FirstOrDefault(x => x.Iso2Code == "US"),
                        NewsletterSub = false,
                        DisplayCurrency = db.Currencies.FirstOrDefault(x => x.Code == "USD")
                    },
                    new User {
                        Email = "mary@eircom.net",
                        Password = "mary1954",
                        FirstName = "Mary",
                        LastName = "Daly",
                        Country = db.Countries.FirstOrDefault(x => x.Iso2Code == "IE"),
                        NewsletterSub = false,
                        DisplayCurrency = db.Currencies.FirstOrDefault(x => x.Code == "EUR")
                    },
                    new User {
                        Email = "jonesie84@gmail.com",
                        Password = "mypass123",
                        FirstName = "Frank",
                        LastName = "Jones",
                        Country = db.Countries.FirstOrDefault(x => x.Iso2Code == "GB"),
                        NewsletterSub = false,
                        DisplayCurrency = db.Currencies.FirstOrDefault(x => x.Code == "GBP")
                    },
                    new User {
                        Email = "ellaon@outlook.com",
                        Password = "pa$$w0Rd",
                        FirstName = "Ella",
                        LastName = "O'Neil",
                        Country = db.Countries.FirstOrDefault(x => x.Iso2Code == "AU"),
                        NewsletterSub = false,
                        DisplayCurrency = db.Currencies.FirstOrDefault(x => x.Code == "AUD")
                    },
                    new User {
                        Email = "jwren@aol.com",
                        Password = "beaTles4eva",
                        FirstName = "Jenny",
                        LastName = "Wren",
                        Country = db.Countries.FirstOrDefault(x => x.Iso2Code == "CA"),
                        NewsletterSub = false,
                        DisplayCurrency = db.Currencies.FirstOrDefault(x => x.Code == "CAD")
                    },
                    new User {
                        Email = "wickie@warner.com",
                        Password = "myPaSS1965",
                        FirstName = "John",
                        LastName = "Wick",
                        Country = db.Countries.FirstOrDefault(x => x.Iso2Code == "US"),
                        NewsletterSub = true,
                        DisplayCurrency = db.Currencies.FirstOrDefault(x => x.Code == "USD")
                    },
                    new User {
                        Email = "smithie@gmail.com",
                        Password = "jackspassw0rd",
                        FirstName = "Jack",
                        LastName = "Smith",
                        Country = db.Countries.FirstOrDefault(x => x.Iso2Code == "NZ"),
                        NewsletterSub = false,
                        DisplayCurrency = db.Currencies.FirstOrDefault(x => x.Code == "NZD")
                    },
                };
                db.Users.AddRange(users);
                db.SaveChanges();
            }
        }


        private static void EnsureUserAccountsSeedData(backendDbContext db)
        {
            if (!db.Accounts.Any())
            {
                var bankAccounts = new List<Account>
                {
                    new Account {
                        AccountName = "Current A/C",
                        Description = "Main joint account",
                        Institution = "Bank of Ireland",
                        IsActive = true,
                        Type = "Current",
                        QuotedCurrency = db.Currencies.FirstOrDefault(x => x.Code == "EUR"),
                        User = db.Users.FirstOrDefault(x => x.UserId == 15)
                    },
                    new Account {
                        AccountName = "Holiday Savings A/C",
                        Description = "Savings account for family holiday to Australia",
                        Institution = "Credit Union",
                        IsActive = true,
                        Type = "Savings",
                        QuotedCurrency = db.Currencies.FirstOrDefault(x => x.Code == "EUR"),
                        User = db.Users.FirstOrDefault(x => x.UserId == 15)
                    },
                    new Account {
                        AccountName = "J1 Current A/C",
                        Description = "Old bank account from J1 trip to USA",
                        Institution = "Bank of America",
                        IsActive = true,
                        Type = "Current",
                        QuotedCurrency = db.Currencies.FirstOrDefault(x => x.Code == "USD"),
                        User = db.Users.FirstOrDefault(x => x.UserId == 15)
                    },
                    new Account {
                        AccountName = "Investment A/C",
                        Description = "Family investment account",
                        Institution = "JP Morgan",
                        IsActive = true,
                        Type = "Investment",
                        QuotedCurrency = db.Currencies.FirstOrDefault(x => x.Code == "GBP"),
                        User = db.Users.FirstOrDefault(x => x.UserId == 15)
                    },

                    new Account {
                        AccountName = "Current A/C",
                        Description = "My personal current account",
                        Institution = "Permanent TSB",
                        IsActive = true,
                        Type = "Current",
                        QuotedCurrency = db.Currencies.FirstOrDefault(x => x.Code == "EUR"),
                        User = db.Users.FirstOrDefault(x => x.UserId == 16)
                    },
                    new Account {
                        AccountName = "Savings A/C",
                        Description = "Savings account for new car",
                        Institution = "Permanent TSB",
                        IsActive = true,
                        Type = "Savings",
                        QuotedCurrency = db.Currencies.FirstOrDefault(x => x.Code == "EUR"),
                        User = db.Users.FirstOrDefault(x => x.UserId == 16)
                    },
                    new Account {
                        AccountName = "Australian Current A/C",
                        Description = "Old current account from living in Australia",
                        Institution = "Commonwealth Bank of Australia",
                        IsActive = false,
                        Type = "Current",
                        QuotedCurrency = db.Currencies.FirstOrDefault(x => x.Code == "AUD"),
                        User = db.Users.FirstOrDefault(x => x.UserId == 16)
                    },

                    new Account {
                        AccountName = "Current A/C",
                        Description = "General current account",
                        Institution = "Ulster Bank",
                        IsActive = true,
                        Type = "Current",
                        QuotedCurrency = db.Currencies.FirstOrDefault(x => x.Code == "EUR"),
                        User = db.Users.FirstOrDefault(x => x.UserId == 17)
                    },
                    new Account {
                        AccountName = "Savings A/C",
                        Description = "Rainy day savings account",
                        Institution = "Post Office",
                        IsActive = true,
                        Type = "Savings",
                        QuotedCurrency = db.Currencies.FirstOrDefault(x => x.Code == "EUR"),
                        User = db.Users.FirstOrDefault(x => x.UserId == 17)
                    },

                    new Account {
                        AccountName = "Joint Current A/C",
                        Description = "Joint current account for running the household",
                        Institution = "Permanent TSB",
                        IsActive = true,
                        Type = "Current",
                        QuotedCurrency = db.Currencies.FirstOrDefault(x => x.Code == "EUR"),
                        User = db.Users.FirstOrDefault(x => x.UserId == 18)
                    },
                    new Account {
                        AccountName = "PTSB Savings A/C",
                        Description = "Savings account for leftovers at end of month",
                        Institution = "Permanent TSB",
                        IsActive = true,
                        Type = "Savings",
                        QuotedCurrency = db.Currencies.FirstOrDefault(x => x.Code == "EUR"),
                        User = db.Users.FirstOrDefault(x => x.UserId == 18)
                    },
                    new Account {
                        AccountName = "My Personal Current A/C",
                        Description = "My old personal current account for paying credit card",
                        Institution = "AIB",
                        IsActive = true,
                        Type = "Current",
                        QuotedCurrency = db.Currencies.FirstOrDefault(x => x.Code == "EUR"),
                        User = db.Users.FirstOrDefault(x => x.UserId == 18)
                    },
                    new Account {
                        AccountName = "Wife's Personal Current A/C",
                        Description = "Her old personal current account",
                        Institution = "Bank of Ireland",
                        IsActive = true,
                        Type = "Current",
                        QuotedCurrency = db.Currencies.FirstOrDefault(x => x.Code == "EUR"),
                        User = db.Users.FirstOrDefault(x => x.UserId == 18)
                    },
                    new Account {
                        AccountName = "Loan Savings A/C",
                        Description = "Savings account for house deposit",
                        Institution = "Bank of Ireland",
                        IsActive = true,
                        Type = "Current",
                        QuotedCurrency = db.Currencies.FirstOrDefault(x => x.Code == "EUR"),
                        User = db.Users.FirstOrDefault(x => x.UserId == 18)
                    }
                };

                db.Accounts.AddRange(bankAccounts);
                db.SaveChanges();
            }
        }

        private static void EnsureUserLoansSeedData(backendDbContext db)
        {
            if (!db.Loans.Any())
            {
                var loanAccounts = new List<Loan>
                {
                    new Loan {
                        LoanName = "Mortgage",
                        Description = "Fist time buyers mortgage for our home",
                        Institution = "Bank of Ireland",
                        IsActive = true,
                        Type = "Mortgage",
                        StartPrincipal = 332500.00m,
                        RateType = "Fixed",
                        TermInMonths = 360,
                        FixedTermInMonths = 60,
                        AprRate = 0.035,
                        StartDate = new DateTime(2018,08,20),
                        QuotedCurrency = db.Currencies.FirstOrDefault(x => x.Code == "EUR"),
                        User = db.Users.FirstOrDefault(x => x.UserId == 15)
                    },
                    new Loan {
                        LoanName = "Car Loan",
                        Description = "Loan for new family car - 2014 Skoda Octavia",
                        Institution = "Bank of Ireland",
                        IsActive = true,
                        Type = "Car Loan",
                        StartPrincipal = 10000.00m,
                        RateType = "Fixed",
                        TermInMonths = 60,
                        FixedTermInMonths = 60,
                        AprRate = 0.109,
                        StartDate = new DateTime(2018,09,01),
                        QuotedCurrency = db.Currencies.FirstOrDefault(x => x.Code == "EUR"),
                        User = db.Users.FirstOrDefault(x => x.UserId == 15)
                    },
                    new Loan {
                        LoanName = "Home Improvements",
                        Description = "Loan for home extension",
                        Institution = "Credit Union",
                        IsActive = true,
                        Type = "Home Improvement Loan",
                        StartPrincipal = 40000.00m,
                        RateType = "Variable",
                        TermInMonths = 60,
                        FixedTermInMonths = 0,
                        AprRate = 0.098,
                        StartDate = new DateTime(2018,09,01),
                        QuotedCurrency = db.Currencies.FirstOrDefault(x => x.Code == "EUR"),
                        User = db.Users.FirstOrDefault(x => x.UserId == 15)
                    },
                    new Loan {
                        LoanName = "Travel Personal Loan",
                        Description = "Personal loan for travels",
                        Institution = "Commonwealth Bank of Australia",
                        IsActive = false,
                        Type = "Personal Loan",
                        StartPrincipal = 8000.00m,
                        RateType = "Fixed",
                        TermInMonths = 24,
                        FixedTermInMonths = 24,
                        AprRate = 0.12,
                        StartDate = new DateTime(2016,02,10),
                        QuotedCurrency = db.Currencies.FirstOrDefault(x => x.Code == "AUD"),
                        User = db.Users.FirstOrDefault(x => x.UserId == 15)
                    },

                    new Loan {
                        LoanName = "Home Mortgage",
                        Description = "Our home mortgage",
                        Institution = "PTSB",
                        IsActive = true,
                        Type = "Mortgage",
                        StartPrincipal = 400000.00m,
                        RateType = "Fixed",
                        TermInMonths = 360,
                        FixedTermInMonths = 60,
                        AprRate = 0.04,
                        StartDate = new DateTime(2016,03,01),
                        QuotedCurrency = db.Currencies.FirstOrDefault(x => x.Code == "EUR"),
                        User = db.Users.FirstOrDefault(x => x.UserId == 16)
                    },
                    new Loan {
                        LoanName = "Investment Mortgage",
                        Description = "Mortgage for our investment property",
                        Institution = "KBC Ireland",
                        IsActive = true,
                        Type = "Mortgage",
                        StartPrincipal = 280000.00m,
                        RateType = "variable",
                        TermInMonths = 240,
                        FixedTermInMonths = 0,
                        AprRate = 0.045,
                        StartDate = new DateTime(2018,01,18),
                        QuotedCurrency = db.Currencies.FirstOrDefault(x => x.Code == "EUR"),
                        User = db.Users.FirstOrDefault(x => x.UserId == 16)
                    },
                    new Loan {
                        LoanName = "Car Loan",
                        Description = "Loan for new 2018 Ford Focus",
                        Institution = "Credit Union",
                        IsActive = true,
                        Type = "Car Loan",
                        StartPrincipal = 18000.00m,
                        RateType = "Fixed",
                        TermInMonths = 60,
                        FixedTermInMonths = 60,
                        AprRate = 0.099,
                        StartDate = new DateTime(2018,09,01),
                        QuotedCurrency = db.Currencies.FirstOrDefault(x => x.Code == "EUR"),
                        User = db.Users.FirstOrDefault(x => x.UserId == 16)
                    },

                    new Loan {
                        LoanName = "Student Loan",
                        Description = "Loan for University Education",
                        Institution = "Credit Union",
                        IsActive = true,
                        Type = "Student Loan",
                        StartPrincipal = 12000.00m,
                        RateType = "Variable",
                        TermInMonths = 60,
                        FixedTermInMonths = 0,
                        AprRate = 0.119,
                        StartDate = new DateTime(2018,09,01),
                        QuotedCurrency = db.Currencies.FirstOrDefault(x => x.Code == "EUR"),
                        User = db.Users.FirstOrDefault(x => x.UserId == 17)
                    },

                    new Loan {
                        LoanName = "Travel Personal Loan",
                        Description = "Personal loan for travelling",
                        Institution = "Bank of America",
                        IsActive = false,
                        Type = "Personal Loan",
                        StartPrincipal = 4000.00m,
                        RateType = "Fixed",
                        TermInMonths = 12,
                        FixedTermInMonths = 12,
                        AprRate = 0.125,
                        StartDate = new DateTime(2016,06,01),
                        QuotedCurrency = db.Currencies.FirstOrDefault(x => x.Code == "USD"),
                        User = db.Users.FirstOrDefault(x => x.UserId == 18)
                    },

                    new Loan {
                        LoanName = "Car Loan",
                        Description = "Loan for new 2016 Tesla Model S",
                        Institution = "AIB",
                        IsActive = true,
                        Type = "Car Loan",
                        StartPrincipal = 40000.00m,
                        RateType = "Variable",
                        TermInMonths = 120,
                        FixedTermInMonths = 0,
                        AprRate = 0.109,
                        StartDate = new DateTime(2019,05,28),
                        QuotedCurrency = db.Currencies.FirstOrDefault(x => x.Code == "EUR"),
                        User = db.Users.FirstOrDefault(x => x.UserId == 19)
                    },

                    new Loan {
                        LoanName = "Personal Loan",
                        Description = "Personal loan for new drum kit",
                        Institution = "Bank of America",
                        IsActive = false,
                        Type = "Personal Loan",
                        StartPrincipal = 4000.00m,
                        RateType = "Fixed",
                        TermInMonths = 12,
                        FixedTermInMonths = 12,
                        AprRate = 0.125,
                        StartDate = new DateTime(2016,06,01),
                        QuotedCurrency = db.Currencies.FirstOrDefault(x => x.Code == "USD"),
                        User = db.Users.FirstOrDefault(x => x.UserId == 18)
                    },
                };

                db.Loans.AddRange(loanAccounts);
                db.SaveChanges();
            }
        }

        private static void EnsureAccountValuesSeedData(backendDbContext db)
        {
            if (!db.AccountValues.Any())
            {
                var accountValues = new List<AccountValue>
                {
                    new AccountValue { Date = new DateTime(2018, 1, 14), Value = 4121.1m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 2) },
                    new AccountValue { Date = new DateTime(2018, 2, 20), Value = 3791.41m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 2) },
                    new AccountValue { Date = new DateTime(2018, 4, 5), Value = 3601.84m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 2) },
                    new AccountValue { Date = new DateTime(2018, 5, 14), Value = 3277.67m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 2) },
                    new AccountValue { Date = new DateTime(2018, 6, 27), Value = 3507.11m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 2) },
                    new AccountValue { Date = new DateTime(2018, 7, 13), Value = 3857.82m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 2) },
                    new AccountValue { Date = new DateTime(2018, 8, 4), Value = 4243.6m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 2) },
                    new AccountValue { Date = new DateTime(2018, 8, 18), Value = 4370.91m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 2) },
                    new AccountValue { Date = new DateTime(2018, 9, 24), Value = 4152.36m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 2) },
                    new AccountValue { Date = new DateTime(2018, 11, 6), Value = 4235.41m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 2) },
                    new AccountValue { Date = new DateTime(2018, 11, 26), Value = 3727.16m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 2) },
                    new AccountValue { Date = new DateTime(2018, 12, 23), Value = 3540.8m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 2) },
                    new AccountValue { Date = new DateTime(2019, 1, 12), Value = 4036.51m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 2) },
                    new AccountValue { Date = new DateTime(2019, 2, 19), Value = 3431.03m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 2) },
                    new AccountValue { Date = new DateTime(2018, 2, 12), Value = 3165m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 3) },
                    new AccountValue { Date = new DateTime(2018, 3, 16), Value = 2785.2m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 3) },
                    new AccountValue { Date = new DateTime(2018, 4, 27), Value = 2478.83m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 3) },
                    new AccountValue { Date = new DateTime(2018, 6, 3), Value = 2107.01m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 3) },
                    new AccountValue { Date = new DateTime(2018, 6, 24), Value = 1833.1m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 3) },
                    new AccountValue { Date = new DateTime(2018, 7, 26), Value = 1888.09m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 3) },
                    new AccountValue { Date = new DateTime(2018, 9, 4), Value = 2039.14m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 3) },
                    new AccountValue { Date = new DateTime(2018, 10, 17), Value = 1855.62m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 3) },
                    new AccountValue { Date = new DateTime(2018, 11, 22), Value = 1818.51m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 3) },
                    new AccountValue { Date = new DateTime(2018, 12, 17), Value = 1600.29m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 3) },
                    new AccountValue { Date = new DateTime(2019, 1, 14), Value = 1584.29m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 3) },
                    new AccountValue { Date = new DateTime(2019, 2, 4), Value = 1726.88m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 3) },
                    new AccountValue { Date = new DateTime(2019, 2, 17), Value = 1606m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 3) },
                    new AccountValue { Date = new DateTime(2019, 3, 26), Value = 1750.54m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 3) },
                    new AccountValue { Date = new DateTime(2018, 2, 8), Value = 2110.08m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 4) },
                    new AccountValue { Date = new DateTime(2018, 2, 26), Value = 2236.68m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 4) },
                    new AccountValue { Date = new DateTime(2018, 3, 30), Value = 2303.78m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 4) },
                    new AccountValue { Date = new DateTime(2018, 4, 28), Value = 2580.23m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 4) },
                    new AccountValue { Date = new DateTime(2018, 5, 24), Value = 2425.42m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 4) },
                    new AccountValue { Date = new DateTime(2018, 6, 13), Value = 2279.89m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 4) },
                    new AccountValue { Date = new DateTime(2018, 7, 14), Value = 2439.48m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 4) },
                    new AccountValue { Date = new DateTime(2018, 8, 17), Value = 2268.72m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 4) },
                    new AccountValue { Date = new DateTime(2018, 8, 30), Value = 2404.84m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 4) },
                    new AccountValue { Date = new DateTime(2018, 10, 9), Value = 2068.16m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 4) },
                    new AccountValue { Date = new DateTime(2018, 11, 14), Value = 2171.57m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 4) },
                    new AccountValue { Date = new DateTime(2018, 12, 7), Value = 1910.98m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 4) },
                    new AccountValue { Date = new DateTime(2018, 12, 22), Value = 2082.97m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 4) },
                    new AccountValue { Date = new DateTime(2019, 2, 4), Value = 2437.07m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 4) },
                    new AccountValue { Date = new DateTime(2018, 1, 31), Value = 4487.6m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 5) },
                    new AccountValue { Date = new DateTime(2018, 2, 12), Value = 3993.96m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 5) },
                    new AccountValue { Date = new DateTime(2018, 3, 9), Value = 3874.14m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 5) },
                    new AccountValue { Date = new DateTime(2018, 3, 31), Value = 3835.4m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 5) },
                    new AccountValue { Date = new DateTime(2018, 5, 10), Value = 3835.4m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 5) },
                    new AccountValue { Date = new DateTime(2018, 5, 25), Value = 4142.23m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 5) },
                    new AccountValue { Date = new DateTime(2018, 7, 9), Value = 4349.34m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 5) },
                    new AccountValue { Date = new DateTime(2018, 7, 23), Value = 3696.94m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 5) },
                    new AccountValue { Date = new DateTime(2018, 8, 12), Value = 3659.97m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 5) },
                    new AccountValue { Date = new DateTime(2018, 9, 20), Value = 4172.37m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 5) },
                    new AccountValue { Date = new DateTime(2018, 10, 28), Value = 4965.12m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 5) },
                    new AccountValue { Date = new DateTime(2018, 12, 12), Value = 5114.07m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 5) },
                    new AccountValue { Date = new DateTime(2018, 12, 27), Value = 6085.74m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 5) },
                    new AccountValue { Date = new DateTime(2019, 1, 15), Value = 5477.17m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 5) },
                    new AccountValue { Date = new DateTime(2018, 1, 17), Value = 5318.11m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 6) },
                    new AccountValue { Date = new DateTime(2018, 2, 12), Value = 5903.1m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 6) },
                    new AccountValue { Date = new DateTime(2018, 3, 27), Value = 5194.73m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 6) },
                    new AccountValue { Date = new DateTime(2018, 4, 10), Value = 4831.1m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 6) },
                    new AccountValue { Date = new DateTime(2018, 5, 3), Value = 4831.1m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 6) },
                    new AccountValue { Date = new DateTime(2018, 6, 2), Value = 5700.7m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 6) },
                    new AccountValue { Date = new DateTime(2018, 6, 17), Value = 6612.81m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 6) },
                    new AccountValue { Date = new DateTime(2018, 7, 24), Value = 6612.81m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 6) },
                    new AccountValue { Date = new DateTime(2018, 8, 10), Value = 6414.43m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 6) },
                    new AccountValue { Date = new DateTime(2018, 8, 24), Value = 6927.58m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 6) },
                    new AccountValue { Date = new DateTime(2018, 9, 19), Value = 7966.72m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 6) },
                    new AccountValue { Date = new DateTime(2018, 10, 21), Value = 6931.05m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 6) },
                    new AccountValue { Date = new DateTime(2018, 12, 5), Value = 6445.88m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 6) },
                    new AccountValue { Date = new DateTime(2019, 1, 1), Value = 7670.6m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 6) },
                    new AccountValue { Date = new DateTime(2018, 2, 14), Value = 4257.36m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 7) },
                    new AccountValue { Date = new DateTime(2018, 3, 20), Value = 4172.21m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 7) },
                    new AccountValue { Date = new DateTime(2018, 4, 10), Value = 4505.99m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 7) },
                    new AccountValue { Date = new DateTime(2018, 5, 10), Value = 4325.75m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 7) },
                    new AccountValue { Date = new DateTime(2018, 5, 31), Value = 4715.07m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 7) },
                    new AccountValue { Date = new DateTime(2018, 7, 12), Value = 5469.48m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 7) },
                    new AccountValue { Date = new DateTime(2018, 7, 30), Value = 5907.04m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 7) },
                    new AccountValue { Date = new DateTime(2018, 8, 14), Value = 6674.96m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 7) },
                    new AccountValue { Date = new DateTime(2018, 9, 8), Value = 6808.46m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 7) },
                    new AccountValue { Date = new DateTime(2018, 9, 21), Value = 6468.04m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 7) },
                    new AccountValue { Date = new DateTime(2018, 11, 3), Value = 6015.28m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 7) },
                    new AccountValue { Date = new DateTime(2018, 12, 19), Value = 5112.99m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 7) },
                    new AccountValue { Date = new DateTime(2019, 1, 22), Value = 5368.64m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 7) },
                    new AccountValue { Date = new DateTime(2019, 2, 7), Value = 5422.33m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 7) },
                    new AccountValue { Date = new DateTime(2018, 1, 19), Value = 2389.08m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 8) },
                    new AccountValue { Date = new DateTime(2018, 2, 27), Value = 2627.99m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 8) },
                    new AccountValue { Date = new DateTime(2018, 4, 12), Value = 3153.59m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 8) },
                    new AccountValue { Date = new DateTime(2018, 5, 6), Value = 2743.62m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 8) },
                    new AccountValue { Date = new DateTime(2018, 5, 24), Value = 2798.49m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 8) },
                    new AccountValue { Date = new DateTime(2018, 6, 27), Value = 3022.37m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 8) },
                    new AccountValue { Date = new DateTime(2018, 7, 12), Value = 2810.8m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 8) },
                    new AccountValue { Date = new DateTime(2018, 8, 3), Value = 2895.12m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 8) },
                    new AccountValue { Date = new DateTime(2018, 8, 22), Value = 2547.71m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 8) },
                    new AccountValue { Date = new DateTime(2018, 9, 12), Value = 2598.66m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 8) },
                    new AccountValue { Date = new DateTime(2018, 10, 24), Value = 3040.43m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 8) },
                    new AccountValue { Date = new DateTime(2018, 12, 6), Value = 3314.07m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 8) },
                    new AccountValue { Date = new DateTime(2019, 1, 7), Value = 3280.93m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 8) },
                    new AccountValue { Date = new DateTime(2019, 2, 9), Value = 2985.65m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 8) },
                    new AccountValue { Date = new DateTime(2018, 2, 8), Value = 1111.95m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 9) },
                    new AccountValue { Date = new DateTime(2018, 3, 11), Value = 1223.15m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 9) },
                    new AccountValue { Date = new DateTime(2018, 4, 7), Value = 1235.38m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 9) },
                    new AccountValue { Date = new DateTime(2018, 5, 11), Value = 1260.09m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 9) },
                    new AccountValue { Date = new DateTime(2018, 6, 5), Value = 1512.11m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 9) },
                    new AccountValue { Date = new DateTime(2018, 6, 21), Value = 1663.32m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 9) },
                    new AccountValue { Date = new DateTime(2018, 8, 5), Value = 1879.55m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 9) },
                    new AccountValue { Date = new DateTime(2018, 8, 23), Value = 2011.12m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 9) },
                    new AccountValue { Date = new DateTime(2018, 9, 24), Value = 1789.9m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 9) },
                    new AccountValue { Date = new DateTime(2018, 10, 6), Value = 1736.2m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 9) },
                    new AccountValue { Date = new DateTime(2018, 10, 29), Value = 1718.84m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 9) },
                    new AccountValue { Date = new DateTime(2018, 12, 11), Value = 1839.16m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 9) },
                    new AccountValue { Date = new DateTime(2019, 1, 9), Value = 1802.38m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 9) },
                    new AccountValue { Date = new DateTime(2019, 2, 21), Value = 1586.09m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 9) },
                    new AccountValue { Date = new DateTime(2018, 1, 22), Value = 4414.4m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 10) },
                    new AccountValue { Date = new DateTime(2018, 2, 7), Value = 3928.82m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 10) },
                    new AccountValue { Date = new DateTime(2018, 3, 25), Value = 4675.3m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 10) },
                    new AccountValue { Date = new DateTime(2018, 4, 15), Value = 5096.08m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 10) },
                    new AccountValue { Date = new DateTime(2018, 5, 27), Value = 5503.77m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 10) },
                    new AccountValue { Date = new DateTime(2018, 6, 13), Value = 5228.58m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 10) },
                    new AccountValue { Date = new DateTime(2018, 6, 28), Value = 4496.58m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 10) },
                    new AccountValue { Date = new DateTime(2018, 7, 18), Value = 5350.93m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 10) },
                    new AccountValue { Date = new DateTime(2018, 8, 7), Value = 4976.36m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 10) },
                    new AccountValue { Date = new DateTime(2018, 9, 19), Value = 4329.43m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 10) },
                    new AccountValue { Date = new DateTime(2018, 10, 26), Value = 5108.73m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 10) },
                    new AccountValue { Date = new DateTime(2018, 12, 8), Value = 5210.9m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 10) },
                    new AccountValue { Date = new DateTime(2018, 12, 23), Value = 5002.46m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 10) },
                    new AccountValue { Date = new DateTime(2019, 1, 7), Value = 4602.26m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 10) },
                    new AccountValue { Date = new DateTime(2018, 1, 19), Value = 2295.2m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 11) },
                    new AccountValue { Date = new DateTime(2018, 2, 19), Value = 2111.58m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 11) },
                    new AccountValue { Date = new DateTime(2018, 3, 26), Value = 2491.66m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 11) },
                    new AccountValue { Date = new DateTime(2018, 5, 3), Value = 2940.16m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 11) },
                    new AccountValue { Date = new DateTime(2018, 6, 1), Value = 3116.57m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 11) },
                    new AccountValue { Date = new DateTime(2018, 7, 10), Value = 3677.55m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 11) },
                    new AccountValue { Date = new DateTime(2018, 8, 16), Value = 3530.45m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 11) },
                    new AccountValue { Date = new DateTime(2018, 9, 21), Value = 3636.36m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 11) },
                    new AccountValue { Date = new DateTime(2018, 10, 26), Value = 3418.18m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 11) },
                    new AccountValue { Date = new DateTime(2018, 11, 13), Value = 3008m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 11) },
                    new AccountValue { Date = new DateTime(2018, 11, 27), Value = 3128.32m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 11) },
                    new AccountValue { Date = new DateTime(2018, 12, 23), Value = 3222.17m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 11) },
                    new AccountValue { Date = new DateTime(2019, 1, 15), Value = 2899.95m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 11) },
                    new AccountValue { Date = new DateTime(2019, 1, 29), Value = 2522.96m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 11) },
                    new AccountValue { Date = new DateTime(2018, 1, 29), Value = 3159.7m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 12) },
                    new AccountValue { Date = new DateTime(2018, 2, 15), Value = 3570.46m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 12) },
                    new AccountValue { Date = new DateTime(2018, 3, 25), Value = 4106.03m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 12) },
                    new AccountValue { Date = new DateTime(2018, 4, 22), Value = 4393.45m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 12) },
                    new AccountValue { Date = new DateTime(2018, 5, 24), Value = 5184.27m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 12) },
                    new AccountValue { Date = new DateTime(2018, 6, 7), Value = 5650.85m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 12) },
                    new AccountValue { Date = new DateTime(2018, 7, 8), Value = 5142.27m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 12) },
                    new AccountValue { Date = new DateTime(2018, 7, 29), Value = 4833.73m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 12) },
                    new AccountValue { Date = new DateTime(2018, 9, 7), Value = 4543.71m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 12) },
                    new AccountValue { Date = new DateTime(2018, 9, 22), Value = 4998.08m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 12) },
                    new AccountValue { Date = new DateTime(2018, 10, 11), Value = 4798.16m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 12) },
                    new AccountValue { Date = new DateTime(2018, 10, 24), Value = 4558.25m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 12) },
                    new AccountValue { Date = new DateTime(2018, 11, 12), Value = 4740.58m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 12) },
                    new AccountValue { Date = new DateTime(2018, 12, 17), Value = 4456.15m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 12) },
                    new AccountValue { Date = new DateTime(2018, 2, 12), Value = 832.81m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 13) },
                    new AccountValue { Date = new DateTime(2018, 3, 23), Value = 966.06m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 13) },
                    new AccountValue { Date = new DateTime(2018, 4, 26), Value = 1053.01m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 13) },
                    new AccountValue { Date = new DateTime(2018, 6, 9), Value = 1053.01m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 13) },
                    new AccountValue { Date = new DateTime(2018, 6, 29), Value = 1232.02m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 13) },
                    new AccountValue { Date = new DateTime(2018, 8, 7), Value = 1330.58m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 13) },
                    new AccountValue { Date = new DateTime(2018, 8, 30), Value = 1290.66m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 13) },
                    new AccountValue { Date = new DateTime(2018, 9, 22), Value = 1510.07m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 13) },
                    new AccountValue { Date = new DateTime(2018, 10, 26), Value = 1525.17m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 13) },
                    new AccountValue { Date = new DateTime(2018, 11, 14), Value = 1662.44m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 13) },
                    new AccountValue { Date = new DateTime(2018, 11, 30), Value = 1446.32m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 13) },
                    new AccountValue { Date = new DateTime(2018, 12, 21), Value = 1648.8m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 13) },
                    new AccountValue { Date = new DateTime(2019, 1, 5), Value = 1879.63m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 13) },
                    new AccountValue { Date = new DateTime(2019, 2, 17), Value = 2180.37m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 13) },
                    new AccountValue { Date = new DateTime(2018, 1, 28), Value = 2362.92m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 14) },
                    new AccountValue { Date = new DateTime(2018, 2, 21), Value = 2244.77m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 14) },
                    new AccountValue { Date = new DateTime(2018, 4, 8), Value = 2446.8m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 14) },
                    new AccountValue { Date = new DateTime(2018, 5, 17), Value = 2544.67m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 14) },
                    new AccountValue { Date = new DateTime(2018, 6, 12), Value = 2341.1m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 14) },
                    new AccountValue { Date = new DateTime(2018, 7, 19), Value = 2575.21m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 14) },
                    new AccountValue { Date = new DateTime(2018, 8, 31), Value = 2240.43m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 14) },
                    new AccountValue { Date = new DateTime(2018, 10, 4), Value = 2307.64m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 14) },
                    new AccountValue { Date = new DateTime(2018, 10, 18), Value = 2676.86m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 14) },
                    new AccountValue { Date = new DateTime(2018, 11, 17), Value = 2757.17m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 14) },
                    new AccountValue { Date = new DateTime(2018, 12, 27), Value = 3088.03m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 14) },
                    new AccountValue { Date = new DateTime(2019, 2, 9), Value = 2686.59m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 14) },
                    new AccountValue { Date = new DateTime(2019, 3, 26), Value = 2820.92m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 14) },
                    new AccountValue { Date = new DateTime(2019, 4, 11), Value = 2538.83m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 14) },
                    new AccountValue { Date = new DateTime(2018, 1, 28), Value = 392.94m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 15) },
                    new AccountValue { Date = new DateTime(2018, 2, 13), Value = 432.23m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 15) },
                    new AccountValue { Date = new DateTime(2018, 3, 20), Value = 376.04m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 15) },
                    new AccountValue { Date = new DateTime(2018, 4, 25), Value = 353.48m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 15) },
                    new AccountValue { Date = new DateTime(2018, 5, 8), Value = 385.29m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 15) },
                    new AccountValue { Date = new DateTime(2018, 5, 20), Value = 366.03m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 15) },
                    new AccountValue { Date = new DateTime(2018, 6, 15), Value = 322.11m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 15) },
                    new AccountValue { Date = new DateTime(2018, 7, 1), Value = 280.24m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 15) },
                    new AccountValue { Date = new DateTime(2018, 8, 1), Value = 311.07m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 15) },
                    new AccountValue { Date = new DateTime(2018, 9, 15), Value = 264.41m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 15) },
                    new AccountValue { Date = new DateTime(2018, 10, 28), Value = 285.56m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 15) },
                    new AccountValue { Date = new DateTime(2018, 11, 15), Value = 305.55m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 15) },
                    new AccountValue { Date = new DateTime(2018, 12, 16), Value = 363.6m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 15) },
                    new AccountValue { Date = new DateTime(2019, 1, 3), Value = 410.87m, Account = db.Accounts.FirstOrDefault(x => x.AccountId == 15) },

                };

                db.AccountValues.AddRange(accountValues);
                db.SaveChanges();
            }
        }


    }
}
